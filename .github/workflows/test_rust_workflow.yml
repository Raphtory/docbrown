name: Run Rust test
on:
  workflow_call:
    inputs:
      skip_waiting_for_test:
        type: boolean
        default: false
        required: false
# DO NOT CHANGE NAME OF WORKFLOW, USED IN OTHER WORKFLOWS KEEP "Rust Tests"
jobs:
  rust-test:
    if: ${{ !inputs.skip_waiting_for_test }}
    name: Rust Tests
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/debug
            target/release
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Build project quietly
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Awarnings
        with:
          command: build
          args: -q --no-default-features
      - name: Run Tests
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Awarnings
        with:
          command: test
          args: --no-default-features
      - name: Run benchmark (windows)
        if: "contains(matrix.os, 'Windows')"
        run: cargo bench --bench base -- --output-format=bencher | tee benchmark-result.txt
      - name: Run benchmark (Unix)
        if: "!contains(matrix.os, 'Windows')"
        run: |
          set -o pipefail
          cargo bench --bench base -- --output-format=bencher | tee benchmark-result.txt
      - name: Download previous benchmark results
        id: restore-benchmark-cache
        uses: actions/cache/restore@v3
        with:
          path: ./benchmark-cache
          key: ${{ runner.os }}-benchmark
      - name: Check benchmark results
        if: github.ref != 'refs/heads/main'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: benchmark-result.txt
          external-data-json-path: ./benchmark-cache/benchmark-result.json
          fail-on-alert: true
      - name: Generate benchmark results
        if: github.ref == 'refs/heads/main'
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: benchmark-result.txt
          external-data-json-path: ./benchmark-cache/benchmark-result.json
      - name: Save benchmark results
        if: github.ref == 'refs/heads/main'
        uses: actions/cache/save@v3
        with:
          path: ./benchmark-cache
          key: ${{ steps.restore-benchmark-cache.outputs.cache-primary-key }}
  doc-test:
    if: ${{ !inputs.skip_waiting_for_test }}
    name: "Doc tests"
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/debug
            target/release
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build Rust Docs
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -Awarnings
        with:
          command: doc
          args: --no-deps --all -q
      - name: Build sphinx (readthedocs) docs
        run: |
          export PATH=$(pwd)/sbt/bin:$PATH
          sudo apt update && sudo apt install -y pandoc make python3-sphinx
          cd docs && python -m pip install -q -r requirements.txt && make html