name: Publish Rust/PyRaphtory to Github, crates.io and PyPi
on:
  workflow_call:
    inputs:
      base:
        description: 'Name of branch to open PR against'
        type: 'string'
        default: 'main'
      version:
        description: 'Version to bump to (e.g. 0.1.0)'
        type: 'string'
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

## DO NOT CACHE THIS UNDER ANY CIRCUMSTANCES
## AS CACHE WILL STORE THE SECRET

jobs:
  release-rust:
    name: Release code
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
    steps:
      - name: Wait for tests to succeed
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'Rust Tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - name: "Checkout code"
        uses: actions/checkout@v3
      - name: "Set up Rust toolchain"
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: "Install cargo release"
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-release
      - name: "Bump version with cargo release and push to remote"
        uses: actions-rs/cargo@v1
        with:
          command: release
          args: --exclude examples --push-remote ${{ input.version }} --no-publish --no-confirm ${{ input.version }}
      - name: "Make PR"
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ input.base }}
          branch: v${{ input.version }}
          commit-message: "Release v${{ input.version }}"
          title: "Release v${{ input.version }}"
          body: |
            Release v${{ input.version }}
            - [x] Publish to crates.io
            - [x] Publish to PyPi
            - [x] Make Tag
            - [x] Publish to Github as release
      - name: "Upload rust packages as artifact"
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: target/package/docbrown-*.crate
  python-linux:
    needs: release-rust
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        working-directory: ./pyraphtory
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          manylinux: auto
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist
  python-windows:
    needs: release-rust
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        working-directory: ./pyraphtory
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist
  python-macos:
    needs: release-rust
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        working-directory: ./pyraphtory
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: dist
  download-artifacts:
    needs: [release-rust, python-linux, python-windows, python-macos]
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts


#    release-gh:
#      name: Release GitHub
#      runs-on: ubuntu-latest
#      steps:
#      - name: "Publish to Github as release"
#        uses: softprops/action-gh-release@v1
#        with:
#          files: |
#            target/wheels/pyraphtory/pyraphtory-*.whl
#          draft: false
#          prerelease: false
#          tag_name: v${{ input.version }}
#          name: v${{ input.version }}
#          body: |
#            Release v${{ input.version }}
#            - [x] Publish to crates.io
#            - [x] Publish to PyPi
#            - [x] Make Tag
#            - [x] Publish to Github as release
#
#  release:
#    name: Release
#    runs-on: ubuntu-latest
#    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [linux, windows, macos]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: wheels
#      - name: Publish to PyPI
#        uses: PyO3/maturin-action@v1
#        env:
#          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
#        with:
#          command: upload
#          args: --skip-existing *