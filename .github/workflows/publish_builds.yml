name: Publish Rust/raphtory to Github, crates.io and PyPi
on:
  workflow_call:
    inputs:
      base:
        description: 'Name of branch to open PR against'
        type: 'string'
        default: 'main'
      version:
        description: 'Select level for version increment'
        type: choice
        required: true
        default: patch
        options:
          - major
          - minor
          - patch
      dry_run:
        description: 'If true, dry run will not publish the release and will not push anything to PyPi/crates.io. 
        However it will still make a PR and a branch to show you what it changed. '
        type: boolean
        default: false
        required: true
      skip_waiting_for_test:
        description: 'If true, will skip waiting for the tests to pass before publishing. 
        WARNING TESTS MUST PASS BEFORE PUBLISHING else they WILL fail the workflow.'
        type: boolean
        default: false
        required: true

jobs:
  release-rust:
      name: Build & Bump packages
      runs-on: '${{ matrix.os }}'
      strategy:
        matrix:
          include:
            - os: ubuntu-latest
      steps:
        - name: "Check if user has write access"
          uses: "lannonbr/repo-permission-check-action@2.0.0"
          with:
            permission: "write"
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: Wait for tests to succeed
          if: ${{ !inputs.skip_waiting_for_test }}
          uses: lewagon/wait-on-check-action@v1.3.1
          with:
            ref: ${{ github.ref }}
            check-name: 'Rust Tests'
            repo-token: ${{ secrets.GH_TOKEN }}
            wait-interval: 10
        - name: Set up cargo cache
          uses: actions/cache@v3
          continue-on-error: false
          with:
            path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            restore-keys: ${{ runner.os }}-cargo-
        - uses: actions/checkout@v3
        - run: |
            git config --global user.email "Haaroon@users.noreply.github.com"
            git config --global user.name "Haaroon"
        - name: "Set up Rust toolchain"
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: stable
            override: true
            components: rustfmt, clippy
        - name: "Install cargo release"
          uses: actions-rs/cargo@v1
          with:
            command: install
            args: cargo-release --force
        - name: "Bump version with cargo release"
          uses: actions-rs/cargo@v1
          with:
            command: release
            args: --execute --no-confirm --no-publish --no-push --no-tag ${{ inputs.version }}
        - name: "Fetch version of crate package and save to env"
          id: set_version
          run: |
              echo "CRATE_VERSION=$(cargo pkgid -p docbrown-db | cut -d# -f2 | cut -d@ -f2)" >> $GITHUB_ENV
              echo "::set-output name=crate_version::${CRATE_VERSION}"
        - name: "Publish docbrown-core to crates.io"
          if: ${{ !inputs.dry_run }}
          uses: actions-rs/cargo@v1
          with:
              command: publish
              args: --token ${{ secrets.CRATES_TOKEN }} --package docbrown-core --allow-dirty
        - name: "Publish docbrown-db to crates.io"
          if: ${{ !inputs.dry_run }}
          uses: actions-rs/cargo@v1
          with:
            command: publish
            args: --token ${{ secrets.CRATES_TOKEN }} --package docbrown-db --allow-dirty
        - name: "Push version changes & Make PR"
          uses: peter-evans/create-pull-request@v4
          with:
            token: ${{ secrets.GH_TOKEN }}
            base: ${{ inputs.base }}
            author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
            branch: ${{ env.CRATE_VERSION }}
            commit-message: "Release v${{ env.CRATE_VERSION }}"
            title: "Release v${{ env.CRATE_VERSION }}"
            body: |
              Release v${{ env.CRATE_VERSION }}
              - [x] Publish to crates.io
              - [x] Publish to PyPi
              - [x] Publish to Github as release
              - Auto-generated by [create-pull-request] triggered by release action [1]
              [1]: https://github.com/peter-evans/create-pull-request
        - name: "Releasing to Github"
          if: ${{ !inputs.dry_run }}
          uses: softprops/action-gh-release@v1
          with:
            draft: false
            prerelease: false
            tag_name: v${{ env.CRATE_VERSION }}
            name: v${{ env.CRATE_VERSION }}
            body: |
              Release v${{ env.CRATE_VERSION }}
              - [x] Publish to crates.io
              - [x] Publish to PyPi
              - [x] Make Tag
              - [x] Release to Github
                - Auto-generated by [create-pull-request] triggered by release action [1]
                [1]: https://github.com/peter-evans/create-pull-request
      outputs:
        crate_version: ${{ steps.set_version.outputs.crate_version }}
  python-linux:
    needs: release-rust
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7]
    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release-rust.outputs.crate_version }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./raphtory
          command: build
          target: ${{ matrix.target }}
          args: --release -i python3.10 --out dist
          manylinux: 2014
          before-script-linux: |
            if [[ -f /etc/os-release ]]; then
              . /etc/os-release
              case $ID in
                ubuntu)
                  echo "Installing openssl-dev on Ubuntu..."
                  apt update
                  apt install -y pkg-config libssl-dev libc6 build-essential
                  ;;
                arch)
                  echo "Installing openssl-dev on Arch Linux..."
                  pacman -Syu --noconfirm pkg-config openssl
                  ;;
                fedora)
                  echo "Installing openssl-dev on Fedora..."
                  dnf update
                  dnf install -y pkg-config openssl-devel
                  ;;
                alpine)
                  echo "Installing openssl-dev on Alpine Linux..."
                  apk update
                  apk add pkgconfig openssl-dev
                  ;;
                centos)
                    echo "Installing openssl-dev on CentOS..."
                    yum update
                    yum install -y pkgconfig openssl-devel
                    ;;  
                *)
                    echo "Unsupported distribution: $ID"
                    exit 1
                    ;;
              esac    
            else
              echo "Could not determine distribution."
              exit 1
            fi
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./raphtory/dist
  python-windows:
    needs: release-rust
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release-rust.outputs.crate_version }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./raphtory
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./raphtory/dist
  python-macos:
    needs: release-rust
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release-rust.outputs.crate_version }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./raphtory
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./raphtory/dist
  publish-python:
    needs: [release-rust, python-linux, python-windows, python-macos]
    name: Publish to PyPi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: pyartifacts
          path: pyartifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: pyartifacts
      - name: Publish a Python distribution to PyPI
        if: ${{ !inputs.dry_run }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: pyartifacts/
          verbose: true
          skip_existing: true
          verify_metadata: false
      - name: "Deleting artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            pyartifacts