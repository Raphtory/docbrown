name: Publish Rust/PyRaphtory to Github, crates.io and PyPi
on:
  workflow_call:
    inputs:
      base:
        description: 'Name of branch to open PR against'
        type: 'string'
        default: 'main'
      version:
        description: 'Version to bump to (e.g. 0.1.0)'
        type: 'string'
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

## DO NOT CACHE THIS UNDER ANY CIRCUMSTANCES
## AS CACHE WILL STORE THE SECRET

jobs:
  release-rust:
      name: Release code
      runs-on: '${{ matrix.os }}'
      strategy:
        matrix:
          include:
            - os: ubuntu-latest
      steps:
#        - name: Wait for tests to succeed
#          uses: lewagon/wait-on-check-action@v1.3.1
#          with:
#            ref: ${{ github.ref }}
#            check-name: 'Rust Tests'
#            repo-token: ${{ secrets.GH_TOKEN }}
#            wait-interval: 10
        - name: Set up cargo cache
          uses: actions/cache@v3
          continue-on-error: false
          with:
            path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
            key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            restore-keys: ${{ runner.os }}-cargo-
        - uses: actions/checkout@v3
        - run: |
            git config --global user.email "Haaroon@users.noreply.github.com"
            git config --global user.name "Haaroon"
        - name: "Set up Rust toolchain"
          uses: actions-rs/toolchain@v1
          with:
            profile: minimal
            toolchain: stable
            override: true
            components: rustfmt, clippy
        - name: "Install cargo release"
          uses: actions-rs/cargo@v1
          with:
            command: install
            args: cargo-release --force
        - name: "Bump version with cargo release and push to remote"
          uses: actions-rs/cargo@v1
          with:
            command: release
            args: --exclude examples --exclude pyraphtory --execute --no-confirm --no-push --no-publish --no-tag ${{ inputs.version }}
        - name: "Make PR"
          uses: peter-evans/create-pull-request@v4
          with:
            token: ${{ secrets.GH_TOKEN }}
            base: ${{ inputs.base }}
            author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
            assignees: haaroon,miratepuffin
            reviewers: haaroon,miratepuffin
            branch: ${{ inputs.version }}
            team-reviewers: |
              owners
              maintainers
            commit-message: "Release v${{ inputs.version }}"
            title: "Release v${{ inputs.version }}"
            body: |
              Release v${{ inputs.version }}
              - [x] Publish to crates.io
              - [x] Publish to PyPi
              - [x] Publish to Github as release
              - Auto-generated by [create-pull-request] triggered by release action [1]
              [1]: https://github.com/peter-evans/create-pull-request
        - name: "Upload rust packages to local cache-artifact"
          uses: actions/upload-artifact@v2
          with:
            name: artifacts
            path: ./target/package/docbrown-*.crate
  python-linux:
    needs: release-rust
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7]
    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pyraphtory
          command: build
          target: ${{ matrix.target }}
          args: --release -i python3.10 --out dist
          manylinux: 2014
          before-script-linux: |
            if [[ -f /etc/os-release ]]; then
              . /etc/os-release
              case $ID in
                ubuntu)
                  echo "Installing openssl-dev on Ubuntu..."
                  apt update
                  apt install -y pkg-config libssl-dev libc6 build-essential
                  ;;
                arch)
                  echo "Installing openssl-dev on Arch Linux..."
                  pacman -Syu --noconfirm pkg-config openssl
                  ;;
                fedora)
                  echo "Installing openssl-dev on Fedora..."
                  dnf update
                  dnf install -y pkg-config openssl-devel
                  ;;
                alpine)
                  echo "Installing openssl-dev on Alpine Linux..."
                  apk update
                  apk add pkgconfig openssl-dev
                  ;;
                centos)
                    echo "Installing openssl-dev on CentOS..."
                    yum update
                    yum install -y pkgconfig openssl-devel
                    ;;  
                *)
                    echo "Unsupported distribution: $ID"
                    exit 1
                    ;;
              esac    
            else
              echo "Could not determine distribution."
              exit 1
            fi
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./pyraphtory/dist
  python-windows:
    needs: release-rust
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pyraphtory
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./pyraphtory/dist
  python-macos:
    needs: release-rust
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.version }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ./pyraphtory
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
      - name: Upload wheels to gh artifact
        uses: actions/upload-artifact@v3
        with:
          name: pyartifacts
          path: ./pyraphtory/dist
  download-release-gh-artifacts:
    needs: [release-rust, python-linux, python-windows, python-macos]
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts
      - uses: actions/download-artifact@v3
        with:
          name: pyartifacts
          path: pyartifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: pyartifacts
      - name: "Publishing to Github as release"
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.crate
          draft: false
          prerelease: false
          tag_name: v${{ inputs.version }}
          name: v${{ inputs.version }}
          body: |
            Release v${{ inputs.version }}
            - [x] Publish to crates.io
            - [x] Publish to PyPi
            - [x] Make Tag
            - [x] Publish to Github as release
      - name: "Deleting artifacts"
        uses: geekyeggo/delete-artifact@v2
        with:
          failOnError: false
          name: |
            artifacts
            pyartifacts

#  release:
#    name: Publish to PyPI
#    runs-on: ubuntu-latest
#    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [linux, windows, macos]
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: wheels
#      - name: Publish to PyPI
#        uses: PyO3/maturin-action@v1
#        env:
#          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
#        with:
#          command: upload
#          args: --skip-existing *
